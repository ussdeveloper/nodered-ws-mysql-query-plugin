name: Node.js CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run client tests
      run: npm run test:client
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        TEST_MYSQL_HOST: 127.0.0.1
        TEST_MYSQL_PORT: 3306
        TEST_MYSQL_USER: root
        TEST_MYSQL_PASSWORD: testpassword
        TEST_MYSQL_DATABASE: test
        
    - name: Run coverage tests
      run: npm run test:coverage
      env:
        TEST_MYSQL_HOST: 127.0.0.1
        TEST_MYSQL_PORT: 3306
        TEST_MYSQL_USER: root
        TEST_MYSQL_PASSWORD: testpassword
        TEST_MYSQL_DATABASE: test
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level moderate
      
    - name: Check for outdated packages
      run: npm outdated || true

  publish:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: https://registry.npmjs.org/
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm pack
      
    - name: Check if version changed
      id: version-check
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PUBLISHED_VERSION=$(npm view node-red-contrib-mysql-websocket-server version 2>/dev/null || echo "0.0.0")
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          echo "version-changed=true" >> $GITHUB_OUTPUT
        else
          echo "version-changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Publish to NPM
      if: steps.version-check.outputs.version-changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
